<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yang Yan&#39;s Personal Webpage on Yang Yan</title>
    <link>https://yan99.github.io/</link>
    <description>Recent content in Yang Yan&#39;s Personal Webpage on Yang Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://yan99.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3A</title>
      <link>https://yan99.github.io/othernotes/3a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yan99.github.io/othernotes/3a/</guid>
      <description>Auto Focus Auto Exposure Auto White Balance </description>
    </item>
    <item>
      <title>Depth Image Denoising</title>
      <link>https://yan99.github.io/projects/depthimagedenoise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yan99.github.io/projects/depthimagedenoise/</guid>
      <description></description>
    </item>
    <item>
      <title>Purdue ECE 638</title>
      <link>https://yan99.github.io/notes/ece638/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yan99.github.io/notes/ece638/</guid>
      <description>Color Science Color Basic Concepts Trichromatic theory of color: interaction of stimulus and 3 different types of receptors in eyes. Color matching experiment: half of the area display with $C_{Target}$, the other half display with $C_{match} = C_{1} + C_{2} + C_{3}$ for additive system. Let examer to match the two colors Spectral representation of color Stimulus for eyes: $S(\lambda) = R(\lambda)\cdot I(\lambda)$, where $R$ is reflectance of the surface, $I$ is the illuminant ray shoot on the surface Have to be normal, due to angular dependence Trichromatic sensor model, where $(R_{s}, G_{s}, B_{s})$ is stimulus vector, $Q$ is spectral response functions of the sensor (eyes/HVS, cameras, etc.</description>
    </item>
    <item>
      <title>Stanford CS 149</title>
      <link>https://yan99.github.io/notes/cs149/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yan99.github.io/notes/cs149/</guid>
      <description>Introduction Overall Parallel thinking Decomposing work into pieces that can safely be performed in parallel Assigning work to processors Managing communication/synchronization between the processors so that it does not limit speedup Writing code Performance characteristics of implementation Design trade-offs: performance vs. convenience vs. cost Hardware Fast != efficient Fast on parallel computer does not mean that it is using the hardware efficiently Make use of provided machine capabilities (Programmer&amp;rsquo;s perspective) vs choosing the right capabilities to put in system (HW designer&amp;rsquo;s perspective) Why parallel: recent 15 years, processor performance improved on exploiting instruction-level parallelism and increasing CPU clock frequency Machine code Structure: fetch/decode $\rightarrow$ ALU (execution unit) $\rightarrow$ execution context (Registers) ALU: performs the operation Registers: maintain program state; store value of variables Instruction level parallelism (ILP) Superscalar execution: Processor automatically find independent instructions in an instruction sequence and executes them in parallel on multiple execution units Superscalar processor: decode and execute multiple instructions per clock Out-of-order control logic $\rightarrow$ fetch/decode 1 // fetch/decode 2 $\rightarrow$ execution 1 // execution 2 $\rightarrow$ execution context Ex.</description>
    </item>
    <item>
      <title>Stanford CS 231m</title>
      <link>https://yan99.github.io/notes/cs231m/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yan99.github.io/notes/cs231m/</guid>
      <description>Panoramas Can be achieved with wide-angle optics or rotation cameras.&#xA;System Overview Camera Module -&amp;gt; Video Frames -&amp;gt; Real-Time Tracking -&amp;gt; Camera Module Camera Module -&amp;gt; Images -&amp;gt; Warping -&amp;gt; Registration -&amp;gt; Blending -&amp;gt; Final Panorama Cylindrical Panoramas Project each image onto a cylinder A cylindrical image is a rectangular array View: reproject a portion of the cylinder onto a picture plane representing the display screen Narrow FOV -&amp;gt; less distortion Same center of projection.</description>
    </item>
  </channel>
</rss>
